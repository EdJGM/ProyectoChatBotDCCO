// Mocks generated by Mockito 5.4.4 from annotations
// in chatbot_dcco/test/widget/widget_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:chatbot_dcco/controllers/chat_controller.dart' as _i3;
import 'package:chatbot_dcco/controllers/settings_controller.dart' as _i7;
import 'package:chatbot_dcco/models/message.dart' as _i4;
import 'package:chatbot_dcco/models/settings.dart' as _i8;
import 'package:flutter/material.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePageController_0 extends _i1.SmartFake
    implements _i2.PageController {
  _FakePageController_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ChatProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockChatProvider extends _i1.Mock implements _i3.ChatProvider {
  MockChatProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i4.Message> get inChatMessages => (super.noSuchMethod(
        Invocation.getter(#inChatMessages),
        returnValue: <_i4.Message>[],
      ) as List<_i4.Message>);

  @override
  _i2.PageController get pageController => (super.noSuchMethod(
        Invocation.getter(#pageController),
        returnValue: _FakePageController_0(
          this,
          Invocation.getter(#pageController),
        ),
      ) as _i2.PageController);

  @override
  int get currentIndex => (super.noSuchMethod(
        Invocation.getter(#currentIndex),
        returnValue: 0,
      ) as int);

  @override
  String get currentChatId => (super.noSuchMethod(
        Invocation.getter(#currentChatId),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.getter(#currentChatId),
        ),
      ) as String);

  @override
  String get modelType => (super.noSuchMethod(
        Invocation.getter(#modelType),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.getter(#modelType),
        ),
      ) as String);

  @override
  bool get isLoading => (super.noSuchMethod(
        Invocation.getter(#isLoading),
        returnValue: false,
      ) as bool);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i6.Future<void> setInChatMessages({required String? chatId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #setInChatMessages,
          [],
          {#chatId: chatId},
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<List<_i4.Message>> loadMessagesFromDB({required String? chatId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadMessagesFromDB,
          [],
          {#chatId: chatId},
        ),
        returnValue: _i6.Future<List<_i4.Message>>.value(<_i4.Message>[]),
      ) as _i6.Future<List<_i4.Message>>);

  @override
  String setCurrentModel({required String? newModel}) => (super.noSuchMethod(
        Invocation.method(
          #setCurrentModel,
          [],
          {#newModel: newModel},
        ),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.method(
            #setCurrentModel,
            [],
            {#newModel: newModel},
          ),
        ),
      ) as String);

  @override
  void setCurrentIndex({required int? newIndex}) => super.noSuchMethod(
        Invocation.method(
          #setCurrentIndex,
          [],
          {#newIndex: newIndex},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setCurrentChatId({required String? newChatId}) => super.noSuchMethod(
        Invocation.method(
          #setCurrentChatId,
          [],
          {#newChatId: newChatId},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setLoading({required bool? value}) => super.noSuchMethod(
        Invocation.method(
          #setLoading,
          [],
          {#value: value},
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<void> deleteChatMessages({required String? chatId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteChatMessages,
          [],
          {#chatId: chatId},
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> prepareChatRoom({
    required bool? isNewChat,
    required String? chatID,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #prepareChatRoom,
          [],
          {
            #isNewChat: isNewChat,
            #chatID: chatID,
          },
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> sentMessage({
    required String? message,
    required bool? isTextOnly,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sentMessage,
          [],
          {
            #message: message,
            #isTextOnly: isTextOnly,
          },
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> loadChat({required String? chatId}) => (super.noSuchMethod(
        Invocation.method(
          #loadChat,
          [],
          {#chatId: chatId},
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  String getChatId() => (super.noSuchMethod(
        Invocation.method(
          #getChatId,
          [],
        ),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.method(
            #getChatId,
            [],
          ),
        ),
      ) as String);

  @override
  _i6.Future<String> createNewChat({
    required String? title,
    String? modelType,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createNewChat,
          [],
          {
            #title: title,
            #modelType: modelType,
          },
        ),
        returnValue: _i6.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #createNewChat,
            [],
            {
              #title: title,
              #modelType: modelType,
            },
          ),
        )),
      ) as _i6.Future<String>);

  @override
  _i6.Future<void> updateLastMessage({
    required String? chatId,
    required String? message,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateLastMessage,
          [],
          {
            #chatId: chatId,
            #message: message,
          },
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> deleteChatHistory({required String? chatId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteChatHistory,
          [],
          {#chatId: chatId},
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  void addListener(dynamic listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(dynamic listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [SettingsProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockSettingsProvider extends _i1.Mock implements _i7.SettingsProvider {
  MockSettingsProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isDarkMode => (super.noSuchMethod(
        Invocation.getter(#isDarkMode),
        returnValue: false,
      ) as bool);

  @override
  bool get shouldSpeak => (super.noSuchMethod(
        Invocation.getter(#shouldSpeak),
        returnValue: false,
      ) as bool);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  void getSavedSettings() => super.noSuchMethod(
        Invocation.method(
          #getSavedSettings,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void toggleDarkMode({
    required bool? value,
    _i8.Settings? settings,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #toggleDarkMode,
          [],
          {
            #value: value,
            #settings: settings,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void toggleSpeak({
    required bool? value,
    _i8.Settings? settings,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #toggleSpeak,
          [],
          {
            #value: value,
            #settings: settings,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(dynamic listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(dynamic listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
